"use client";

import { useState, useEffect } from 'react';
import SimpleMarkdown from 'simple-markdown';
import Link from 'next/link';

export default function CompetitorTrackingContent() {
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisResult, setAnalysisResult] = useState(null);
  const [error, setError] = useState(null);
  const [parsedReport, setParsedReport] = useState('');
  const [showValidation, setShowValidation] = useState(false);
  const [savedReports, setSavedReports] = useState([]);
  const [userInputs, setUserInputs] = useState({
    company_name: '',
    industry: '',
    competitors: [],
    metrics: [],
    timeframe: '2024',
    analysis_depth: 'detailed',
    market_region: 'global',
    analysis_scope: 4
  });

  const [currentCompetitor, setCurrentCompetitor] = useState('');
  const [allReports, setAllReports] = useState([]);
  const [selectedReport, setSelectedReport] = useState(null);
  const [showReportModal, setShowReportModal] = useState(false);
  const [reportContent, setReportContent] = useState('');

  const metricOptions = [
    "Market Share",
    "Product Features", 
    "Pricing Strategy",
    "Marketing Channels",
    "Customer Satisfaction"
  ];

  const analysisDepthOptions = [
    { value: 'basic', label: 'Basic Analysis' },
    { value: 'detailed', label: 'Detailed Analysis' },
    { value: 'comprehensive', label: 'Comprehensive Analysis' }
  ];

  const marketRegions = [
    { value: 'global', label: 'Global' },
    { value: 'north_america', label: 'North America' },
    { value: 'europe', label: 'Europe' },
    { value: 'asia_pacific', label: 'Asia Pacific' },
    { value: 'latin_america', label: 'Latin America' }
  ];

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setUserInputs(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleCompetitorAdd = () => {
    if (currentCompetitor.trim()) {
      if (userInputs.competitors.includes(currentCompetitor.trim())) {
        setError('This competitor is already added');
        return;
      }
      
      setUserInputs(prev => ({
        ...prev,
        competitors: [...prev.competitors, currentCompetitor.trim()]
      }));
      setCurrentCompetitor('');
      setError(null);
    }
  };

  const removeCompetitor = (index) => {
    setUserInputs(prev => ({
      ...prev,
      competitors: prev.competitors.filter((_, i) => i !== index)
    }));
  };

  const handleMetricsChange = (e) => {
    const value = Array.from(e.target.selectedOptions, option => option.value);
    setUserInputs(prev => ({
      ...prev,
      metrics: value
    }));
  };

  const startAnalysis = async () => {
    // Validation
    if (!userInputs.company_name) {
      setError('Company name is required');
      return;
    }

    if (userInputs.competitors.length === 0) {
      setError('Add at least one competitor');
      return;
    }

    if (!userInputs.industry) {
      setError('Industry is required');
      return;
    }

    try {
      setIsAnalyzing(true);
      setError(null);
      setAnalysisResult(null);
      setParsedReport('');

      // Prepare request data
      const requestData = {
        company_name: userInputs.company_name,
        industry: userInputs.industry,
        competitors: userInputs.competitors,
        metrics: userInputs.metrics.length > 0 ? userInputs.metrics : metricOptions,
        timeframe: userInputs.timeframe || '2024',
        analysis_depth: userInputs.analysis_depth || 'detailed',
        market_region: userInputs.market_region || 'global'
      };

      // Make API call
      const response = await fetch('https://varun324242-sj.hf.space/api/competitor-tracking', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
      });

      if (!response.ok) {
        throw new Error(`Server error: ${response.status}`);
      }

      const data = await response.json();

      if (data.error) {
        throw new Error(data.error);
      }

      // Format and save the report
      const formattedReport = convertToHtml(data.analysis_report);
      setParsedReport(formattedReport);

      // Save to localStorage
      const newReport = {
        id: Date.now(),
        timestamp: new Date().toISOString(),
        company: userInputs.company_name,
        industry: userInputs.industry,
        competitors: userInputs.competitors,
        result: data
      };

      const updatedReports = [newReport, ...savedReports].slice(0, 10);
      localStorage.setItem('competitorTrackingReports', JSON.stringify(updatedReports));
      setSavedReports(updatedReports);

      // Save current analysis
      localStorage.setItem('currentCompetitorAnalysis', JSON.stringify({
        result: data,
        inputs: userInputs,
        timestamp: new Date().toISOString()
      }));

      setAnalysisResult(data);

    } catch (err) {
      console.error('Analysis error:', err);
      setError(
        err.message === 'Failed to fetch' 
          ? 'Network error. Please check your internet connection.'
          : err.message || 'Failed to perform analysis'
      );
    } finally {
      setIsAnalyzing(false);
    }
  };

  // Function to fetch all reports
  const fetchAllReports = async () => {
    try {
      const response = await fetch('https://varun324242-sj.hf.space/api/reports');
      const data = await response.json();
      setAllReports(data.reports);
    } catch (err) {
      console.error('Error fetching reports:', err);
    }
  };

  // Parse markdown when analysis result changes
  useEffect(() => {
    if (analysisResult?.analysis_report) {
      const formattedReport = analysisResult.analysis_report
        .replace(/^# (.*$)/gm, '<h1 class="text-3xl font-bold mt-6 mb-4 text-gray-900">$1</h1>')
        .replace(/^## (.*$)/gm, '<h2 class="text-2xl font-bold mt-6 mb-3 text-gray-800">$1</h2>')
        .replace(/^### (.*$)/gm, '<h3 class="text-xl font-semibold mt-4 mb-2 text-gray-700">$1</h3>')
        .replace(/\*\*(.*?)\*\*/g, '<strong class="font-semibold text-gray-900">$1</strong>')
        .replace(/^\- (.*$)/gm, '<li class="ml-4 mb-1 text-gray-700">• $1</li>')
        .replace(/^(?!<[hl]|<li)(.*$)/gm, '<p class="mb-4 text-gray-600 leading-relaxed">$1</p>')
        .replace(/(<li.*<\/li>)/s, '<ul class="mb-4 space-y-2">$1</ul>');
      
      setParsedReport(formattedReport);
    }
  }, [analysisResult]);

  // Fetch reports on component mount
  useEffect(() => {
    fetchAllReports();
  }, []);

  const viewReport = async (report) => {
    try {
      const response = await fetch(`https://varun324242-sj.hf.space/api/report-content/${report.filename}`);
      const data = await response.json();
      
      if (data.status === 'success') {
        setSelectedReport(report);
        setReportContent(data.content);
        setShowReportModal(true);
      }
    } catch (err) {
      console.error('Error fetching report content:', err);
    }
  };

  // Add these useEffects for local storage
  useEffect(() => {
    // Load saved reports
    const savedReportsFromStorage = localStorage.getItem('competitorTrackingReports');
    if (savedReportsFromStorage) {
      setSavedReports(JSON.parse(savedReportsFromStorage));
    }

    // Load current analysis
    const currentAnalysis = localStorage.getItem('currentCompetitorAnalysis');
    if (currentAnalysis) {
      const parsedAnalysis = JSON.parse(currentAnalysis);
      setAnalysisResult(parsedAnalysis.result);
      setUserInputs(parsedAnalysis.inputs);
    }
  }, []);

  // Add clear reports function
  const clearReports = () => {
    localStorage.removeItem('competitorTrackingReports');
    localStorage.removeItem('currentCompetitorAnalysis');
    setSavedReports([]);
    setAnalysisResult(null);
    setParsedReport('');
    setUserInputs({
      company_name: '',
      industry: '',
      competitors: [],
      metrics: [],
      timeframe: '2024',
      analysis_depth: 'detailed',
      market_region: 'global',
      analysis_scope: 4
    });
  };

  // Add load saved report function
  const loadSavedReport = (report) => {
    localStorage.setItem('currentCompetitorAnalysis', JSON.stringify({
      result: report.result,
      inputs: {
        company_name: report.company,
        industry: report.industry,
        competitors: report.competitors,
        metrics: report.result.metrics || [],
        timeframe: report.result.timeframe || '2024',
        analysis_depth: 'detailed',
        market_region: 'global',
        analysis_scope: 4
      },
      timestamp: report.timestamp
    }));

    setAnalysisResult(report.result);
    setUserInputs({
      company_name: report.company,
      industry: report.industry,
      competitors: report.competitors,
      metrics: report.result.metrics || [],
      timeframe: report.result.timeframe || '2024',
      analysis_depth: 'detailed',
      market_region: 'global',
      analysis_scope: 4
    });
  };

  // Add helper function for HTML conversion
  const convertToHtml = (text) => {
    if (!text) return '';
    
    return text
      .replace(/^# (.*$)/gm, '<h1 class="text-3xl font-bold mt-6 mb-4 text-purple-400">$1</h1>')
      .replace(/^## (.*$)/gm, '<h2 class="text-2xl font-bold mt-6 mb-3 text-purple-400">$1</h2>')
      .replace(/^### (.*$)/gm, '<h3 class="text-xl font-semibold mt-4 mb-2 text-purple-400">$1</h3>')
      .replace(/\*\*(.*?)\*\*/g, '<strong class="text-purple-300 font-semibold">$1</strong>')
      .replace(/^\- (.*$)/gm, '<li class="ml-4 mb-1 text-white">• $1</li>')
      .replace(/^(?!<[hl]|<li)(.*$)/gm, '<p class="mb-4 text-white leading-relaxed">$1</p>')
      .replace(/(<li.*<\/li>)/s, '<ul class="mb-4 space-y-2">$1</ul>');
  };

  return (
    <div className="min-h-screen bg-black text-white">
      <div className="max-w-6xl mx-auto px-6 py-8">
        {/* Header */}
        <div className="mb-8 text-center">
          <h1 className="text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-400">
            Competitor Tracking Analysis
          </h1>
        </div>

        {/* Navigation */}
        <div className="mb-10 flex justify-center">
          <div className="bg-[#1D1D1F]/60 backdrop-blur-xl p-1.5 rounded-xl inline-flex shadow-xl">
            <Link 
              href="/market-trends"
              className="px-8 py-2.5 rounded-lg text-white hover:text-white hover:bg-white/5"
            >
              Market Analysis
            </Link>
            <button className="px-8 py-2.5 rounded-lg transition-all duration-300 bg-purple-600/90 text-white">
              Competitor Tracking
            </button>
          </div>
        </div>

        {/* Saved Reports Section */}
        {savedReports?.length > 0 && (
          <div className="mb-6 flex justify-between items-center">
            <div className="text-sm text-white">
              {savedReports.length} saved report{savedReports.length !== 1 ? 's' : ''}
            </div>
            <button
              onClick={clearReports}
              className="px-4 py-1.5 text-sm rounded-lg bg-red-500/20 text-red-400 hover:bg-red-500/30 transition-colors"
            >
              Clear All Reports
            </button>
          </div>
        )}

        {/* Recent Reports */}
        {savedReports?.length > 0 && (
          <div className="mb-8 bg-[#1D1D1F]/60 backdrop-blur-xl rounded-xl p-4 border border-gray-800/50">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold text-purple-400">Recent Reports</h3>
            </div>
            <div className="space-y-2">
              {savedReports.map(report => (
                <div 
                  key={report.id}
                  className="flex justify-between items-center p-3 rounded-lg bg-[#2D2D2F]/50 hover:bg-[#2D2D2F]/70 transition-colors cursor-pointer"
                  onClick={() => loadSavedReport(report)}
                >
                  <div>
                    <p className="text-white font-medium">{report.company}</p>
                    <p className="text-sm text-white">
                      Competitors: {report.competitors.join(', ')}
                    </p>
                  </div>
                  <div className="text-right">
                    <p className="text-sm text-white">
                      {new Date(report.timestamp).toLocaleDateString()}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Main Form */}
        <div className="space-y-8">
          <div className="bg-[#1D1D1F]/80 backdrop-blur-xl rounded-xl shadow-xl p-8 border border-gray-800/50">
            <div className="grid grid-cols-2 gap-8">
              {/* Company & Industry */}
              <div className="space-y-2">
                <label className="text-sm font-medium text-purple-400">Company Name</label>
                <input
                  name="company_name"
                  value={userInputs.company_name}
                  onChange={handleInputChange}
                  className="w-full p-2.5 bg-[#2D2D2F]/50 text-white rounded-lg border border-gray-700/50 focus:border-purple-500/50 focus:ring-2 focus:ring-purple-500/10"
                  placeholder="Enter company name"
                />
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium text-purple-400">Industry</label>
                <input
                  name="industry"
                  value={userInputs.industry}
                  onChange={handleInputChange}
                  className="w-full p-2.5 bg-[#2D2D2F]/50 text-white rounded-lg border border-gray-700/50 focus:border-purple-500/50 focus:ring-2 focus:ring-purple-500/10"
                  placeholder="Enter industry"
                />
              </div>

              {/* Competitors Section */}
              <div className="col-span-2 space-y-2">
                <label className="text-sm font-medium text-purple-400">Competitors</label>
                <div className="space-y-3">
                  <div className="flex gap-2">
                    <input
                      value={currentCompetitor}
                      onChange={(e) => setCurrentCompetitor(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && handleCompetitorAdd()}
                      className="flex-1 p-2.5 bg-[#2D2D2F]/50 text-white rounded-lg border border-gray-700/50 focus:border-purple-500/50 focus:ring-2 focus:ring-purple-500/10"
                      placeholder="Enter competitor name"
                    />
                    <button
                      onClick={handleCompetitorAdd}
                      className="px-4 py-2 bg-purple-600/50 hover:bg-purple-600/70 rounded-lg transition-colors text-white"
                    >
                      Add
                    </button>
                  </div>
                  <div className="flex flex-wrap gap-2">
                    {userInputs.competitors.map((competitor, index) => (
                      <div
                        key={index}
                        className="flex items-center gap-2 bg-[#2D2D2F]/70 px-3 py-1.5 rounded-lg"
                      >
                        <span className="text-white">{competitor}</span>
                        <button
                          onClick={() => removeCompetitor(index)}
                          className="text-red-400 hover:text-red-300"
                        >
                          ×
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              {/* Metrics */}
              <div className="col-span-2 space-y-2">
                <label className="text-sm font-medium text-purple-400">Metrics</label>
                <div className="grid grid-cols-3 gap-2 bg-[#2D2D2F]/50 p-3 rounded-lg border border-gray-700/50">
                  {metricOptions.map(metric => (
                    <label 
                      key={metric} 
                      className="flex items-center gap-2 p-2 rounded-lg hover:bg-purple-600/10 cursor-pointer group"
                    >
                      <input
                        type="checkbox"
                        name="metrics"
                        value={metric}
                        checked={userInputs.metrics.includes(metric)}
                        onChange={(e) => {
                          const value = e.target.value;
                          setUserInputs(prev => ({
                            ...prev,
                            metrics: e.target.checked 
                              ? [...prev.metrics, value]
                              : prev.metrics.filter(item => item !== value)
                          }));
                        }}
                        className="w-4 h-4 rounded border-gray-600 text-purple-600 focus:ring-purple-500/20"
                      />
                      <span className="text-sm text-white group-hover:text-white">
                        {metric}
                      </span>
                    </label>
                  ))}
                </div>
              </div>

              {/* Analysis Settings */}
              <div className="space-y-2">
                <label className="text-sm font-medium text-purple-400">Time Period</label>
                <input
                  name="timeframe"
                  value={userInputs.timeframe}
                  onChange={handleInputChange}
                  className="w-full p-2.5 bg-[#2D2D2F]/50 text-white rounded-lg border border-gray-700/50 focus:border-purple-500/50 focus:ring-2 focus:ring-purple-500/10"
                  placeholder="e.g., 2024"
                />
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium text-purple-400">Analysis Depth</label>
                <select
                  name="analysis_depth"
                  value={userInputs.analysis_depth}
                  onChange={handleInputChange}
                  className="w-full p-2.5 bg-[#2D2D2F]/50 text-white rounded-lg border border-gray-700/50 focus:border-purple-500/50 focus:ring-2 focus:ring-purple-500/10"
                >
                  {analysisDepthOptions.map(option => (
                    <option key={option.value} value={option.value} className="bg-[#2D2D2F]">
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>

              {/* Submit Button */}
              <div className="col-span-2 space-y-2">
                <button
                  onClick={startAnalysis}
                  disabled={isAnalyzing}
                  className="w-full px-6 py-2.5 rounded-lg font-medium bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-500 hover:to-pink-500 text-white shadow-lg transition-all duration-300 transform hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isAnalyzing ? 'Analyzing...' : 'Start Analysis'}
                </button>
                {error && (
                  <p className="text-red-400 text-sm mt-2">
                    {error}
                  </p>
                )}
              </div>
            </div>
          </div>

          {/* Results Section */}
          <div className="bg-[#1D1D1F]/80 backdrop-blur-xl rounded-xl shadow-xl border border-gray-800/50">
            {isAnalyzing ? (
              <div className="h-60 flex items-center justify-center">
                <div className="flex items-center gap-3">
                  <div className="animate-spin h-6 w-6 border-2 border-purple-500 border-t-transparent rounded-full"></div>
                  <p className="text-white text-lg">Analyzing competitors...</p>
                </div>
              </div>
            ) : analysisResult ? (
              <div className="p-8 space-y-6">
                <h2 className="text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-400">
                  Analysis Results
                </h2>
                
                <div className="bg-[#2D2D2F]/70 p-6 rounded-lg border border-gray-700/50">
                  <div className="grid grid-cols-2 gap-6">
                    <div className="space-y-3">
                      <p className="text-white">
                        <span className="font-medium text-purple-400">Company:</span>
                        <span className="ml-2">{analysisResult.summary?.company}</span>
                      </p>
                      <p className="text-white">
                        <span className="font-medium text-purple-400">Industry:</span>
                        <span className="ml-2">{analysisResult.summary?.industry}</span>
                      </p>
                    </div>
                    <div className="space-y-3">
                      <p className="text-white">
                        <span className="font-medium text-purple-400">Competitors:</span>
                        <span className="ml-2">{userInputs.competitors.join(', ')}</span>
                      </p>
                      <p className="text-white">
                        <span className="font-medium text-purple-400">Time Period:</span>
                        <span className="ml-2">{userInputs.timeframe}</span>
                      </p>
                    </div>
                  </div>
                </div>

                <div className="bg-[#2D2D2F]/70 p-6 rounded-lg border border-gray-700/50">
                  <div className="prose prose-invert max-w-none">
                    <div 
                      className="
                        text-white
                        leading-relaxed 
                        [&>h1]:text-3xl [&>h1]:font-bold [&>h1]:text-purple-400 [&>h1]:mb-6
                        [&>h2]:text-2xl [&>h2]:font-semibold [&>h2]:text-purple-400 [&>h2]:mt-8 [&>h2]:mb-4
                        [&>h3]:text-xl [&>h3]:font-semibold [&>h3]:text-purple-400 [&>h3]:mt-6 [&>h3]:mb-3
                        [&>p]:text-white [&>p]:mb-4 [&>p]:text-base [&>p]:leading-relaxed
                        [&>ul]:mb-6 [&>ul]:list-disc [&>ul]:pl-6 
                        [&>ul>li]:text-white [&>ul>li]:mb-2
                        [&>ol]:mb-6 [&>ol]:list-decimal [&>ol]:pl-6
                        [&>ol>li]:text-white [&>ol>li]:mb-2
                        [&>strong]:text-purple-300 [&>strong]:font-semibold
                        [&>em]:text-purple-200 [&>em]:italic
                        [&>blockquote]:border-l-4 [&>blockquote]:border-purple-400 [&>blockquote]:pl-4 [&>blockquote]:italic [&>blockquote]:text-white
                      "
                      dangerouslySetInnerHTML={{ __html: parsedReport }} 
                    />
                  </div>
                </div>
              </div>
            ) : (
              <div className="h-60 flex items-center justify-center">
                <p className="text-white text-lg">
                  Analysis results will appear here
                </p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}